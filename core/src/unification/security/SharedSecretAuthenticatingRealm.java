/**
 * SharedSecretAuthenticatingRealm.java
 *
 */
package unification.security;

import com.google.inject.Inject;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.crypto.hash.Sha256Hash;
import org.apache.shiro.realm.AuthenticatingRealm;
import org.apache.shiro.util.ByteSource;
import unification.configuration.Log;

/**
 * @author chrisbjohannsen@gmail.com
 *         Implementation of our Shared Secret Key authentication realm used to authenticate
 *         client communications. This realm handles the custom SharedSecretAutheticationToken
 *         generated by the SharedSecretAuthenticatingFilter.
 */
public class SharedSecretAuthenticatingRealm extends AuthenticatingRealm {

    private final int HASH_ITERATIONS = 1000;
    @Log
    org.slf4j.Logger mLogger;

    /**
     * DI constructor
     */
    @Inject
    public SharedSecretAuthenticatingRealm() {
        super();
    }

    /* (non-Javadoc)
     * @see org.apache.shiro.realm.AuthenticatingRealm#doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authToken)
            throws AuthenticationException {

        try {
            SharedSecretAuthenticationToken token = (SharedSecretAuthenticationToken) authToken;
            String serial = token.getPrincipal().toString();

            String salt = ((SharedSecretAuthenticationToken) authToken).getClientId();

            String hashTarget = String.format("%s%s%s", token.getHttpMethod(), token.getResourceName(), token.getRequestDate());

            mLogger.info(String.format("Hash Target: %s", hashTarget));

            String digestString =
                    new Sha256Hash(hashTarget, salt, HASH_ITERATIONS).toBase64();

            mLogger.info(String.format("Calculated Digest: %s", digestString));

            SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(serial, digestString.toCharArray(), ByteSource.Util.bytes(salt), getName());

            return info;

        }
        catch (ClassCastException ex) {
            throw new AuthenticationException(String.format("Invalid Token Type: %s", authToken.getClass().getName()));
        }
    }

    /* (non-Javadoc)
     * @see org.apache.shiro.realm.AuthenticatingRealm#supports(org.apache.shiro.authc.AuthenticationToken)
     */
    @Override
    public boolean supports(AuthenticationToken token) {
        return token instanceof SharedSecretAuthenticationToken;
    }

}
